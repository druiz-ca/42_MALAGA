# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    makefile                                           :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: druiz-ca <druiz-ca@student.42.fr>          +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2024/02/08 10:07:15 by druiz-ca          #+#    #+#              #
#    Updated: 2024/02/08 11:54:53 by druiz-ca         ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

NAME = libftprintf.a

SRCS = ft_printf.c ft_itoa.c ft_uitoa.c ft_hexitoa.c ft_ifs.c ft_if_x.c\

INCLUDE = ft_printf.h

CC = gcc
RM = rm -f
AR = ar rcs
CFLAGS = -Wall -Wextra -Werror

%.o: %.c ${INCLUDE}
			@echo "-> Compilando "
			@${CC} ${CFLAGS} -c $< -o $@

OBJS = ${SRCS:.c=.o}

all:	${NAME}

${NAME}: ${OBJS}
		@${AR} ${NAME} ${OBJS}
		@echo "\n Creado $(NAME) ✓ \n"

clean:
		@${RM} ${OBJS}
		@echo "\n -> Todos los objetos limpiados con éxito <-\n"

fclean:
		@${RM} ${OBJS}
		@${RM} ${NAME}
		@echo "\n -> Todos los objetos y ejecutables limpiados con éxito <- \n"

re: fclean all

.PHONY: all clean fclean re























#SOURCES = ft_printf.c ft_itoa.c ft_uitoa.c ft_hexitoa.c ft_ifs.c ft_if_x.c\

#OBJECTS = $(SOURCES:.c=.o)
#CC = gcc
#CFLAGS = -Wall -Wextra -Werror

#all: $(NAME)

#$(NAME): $(OBJECTS)
#	$(AR) -r $@ $?

#bonus: $(OBJECTS) $(BOBJECTS)
#	$(AR) -r $(NAME) $?

#%.o: %.c
#	$(CC) -c $(CFLAGS) $?

#clean:
#	rm -f $(OBJECTS) $(BOBJECTS)
	
#fclean: clean
#rm -f $(NAME)

#re: fclean all

#.PHONY: all clean fclean re


#NAME = libftprintf.a: 
#Define una variable NAME que contiene el nombre del archivo de la biblioteca que se creará.
#SRCS = libftprintf.c ft_itoa.c ft_uitoa.c ft_hexitoa.c ft_ifs.c ft_if_x.c: 
#Define una variable SRCS que contiene una lista de los archivos de código fuente que se compilarán.
#OBJS = $(SRCS:.c=.o): 
#Define una variable OBJS que contiene una lista de los archivos de objeto que se generarán a partir de los archivos de código fuente.
#CC = gcc: 
#Define una variable CC que contiene el nombre del compilador que se utilizará.
#CFLAGS = -Wall -Wextra -Werror: 
#Define una variable CFLAGS que contiene las opciones que se pasarán al compilador.
#all: $(NAME): 
#Define una regla all que depende de $(NAME). Cuando ejecutas make sin argumentos, se ejecuta la regla all.
#$(NAME): $(OBJS): 
#Define una regla para crear $(NAME) a partir de $(OBJS). Utiliza el comando ar para crear una biblioteca estática a partir de los archivos de objeto.
#%.o: %.c: 
#Define una regla de patrón que dice cómo convertir un archivo .c en un archivo .o. Utiliza el compilador $(CC) para compilar el archivo de código fuente en un archivo de objeto.
#clean:: 
#Define una regla clean que elimina todos los archivos de objeto.
#fclean: clean: 
#Define una regla fclean que depende de clean y también elimina $(NAME).
#re: fclean all: 
#Define una regla re que depende de fclean y all. Esto permite limpiar todo y luego reconstruir todo con un solo comando.
#.PHONY: all clean fclean re: 
#Declara que all, clean, fclean y re son objetivos ficticios, lo que significa que no se corresponden con archivos reales.
