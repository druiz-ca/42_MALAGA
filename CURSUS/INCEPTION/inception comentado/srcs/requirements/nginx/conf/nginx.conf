###   GLOBAL CONTEXT   ###

#   It's a good practice to define the user directive explicitly
user www-data;
#   Default user for Debian-based systems is www-data
#   This means that the worker processes of Nginx will \
# operate under the www-data user account on the system.
#   This account is typically a non-privileged system user \
# that is dedicated to running web services.
#  REMINDER: User accounts are in /etc/passwd

#   If worker_processes directive is not explicitly defined, it defaults to 1.
worker_processes auto;
#   If the worker_processes directive is set to auto, Nginx will \
# automatically adjust the number of worker processes to match \
# the number of CPU cores available on the server.
#  REMINDER: Command to check the number of cores: "grep -c ^processor /proc/cpuinfo"

#   Default location for the PID file, not necessary to set explicitly in most cases.
pid /run/nginx.pid;
#   It specifies the location of the file where the process ID (PID) \
# of the main Nginx process is stored.

#   It's standard practice to use the include directive for mudularity \
# and dynamic module management.
include /etc/nginx/modules-enabled/*.conf;
#   It's user to include additional configuration files from a specified directory.
#   This directive allows you to modularize your configuration by separating \
# it into multiple smaller files, making it easier to manage and extend.

#   Adding the directive error_log is a good practive.
error_log /var/log/nginx/error.log warn;
#   /var/log/nginx/error.log is the default log file location on most distributions
#   Nginx will log warnings (warn) and messages of higher severity.
#  REMINDER: Common levels: debug, info, notice, warn, error, crit, alert, emerg.


###   EVENTS BLOCK   ###

#   The events block is required in the Nginx configuration file. It \
# must be present in the configuration, even if it is left empty.
#   Without it, Nginx will fail to start and return an error because \
# the events block is a core part of the configuration structure

#   It's used to configure how Nginx handles connections.
events {

#   Specifies the maximum number of simultaneous connections a single \
# worker process can handle. Default value is 512.
	worker_connections 1024;
#   If you not set the worker_connections explicitly, it may not be \
# enough for high-traffic environments.

#   There are more directives for events block, but they are not \
# interesting for this project.
}


###   HTTP CONTEXT   ###

#   The http context is where you define setting and directives that \
# control how Nginx handles HTTP and HTTPS traffic. It is one of the most \
# important sections because it contains global settings for web traffic, as \
# well as configurations for individual virtual servers (server blocks) and \
# routes (location blocks).

http {

#   I will not include any directives in the global http settings.

###   SERVER BLOCK   ###

#   Server blocks are used to define how the server handles requests for \
# a specific domain, IP address, or port. They allow you to host multiple \
# websites or services on the same server by using virtual hosting.
	server {

#   Listen directive specifies the port and optionally the IP address \
# for the server to listen on.
		listen 443 ssl;
#   This tells Nginx to listen on port 443 for incoming HTTPS connections \
# and to use SSL/TLS (Secure Sockets Layer/Transport Layer Security) encryption.
#   Port 443 is the standard port for HTTPS traffic. Without this directive, \
# Nginx won't know to handle encrypted connections.

#   Specifies which SSL/TLS protocols to support.
		ssl_protocols TLSv1.2 TLSv1.3;
#   TLS 1.2 and TLS 1.3 are recommended for moderm, secure connections.

#   Path to your SSL certificate file.
		ssl_certificate /etc/nginx/ssl/inception.crt;
#   This is the public certificate issued by a Certificate Authority (CA) \
# or self-signed. In this case it's self-signed.

#   Path to the private key associated with the SSL certificate.
		ssl_certificate_key /etc/nginx/ssl/inception.key;

#   Specifies the directory where your website's files are stored.
		root /var/www/html/wordpress;
#   This should be the path to your website's document root.

#   Defines the default files to serve when a directory is requested.
		index index.php index.html index.htm;
#   index.html is standard.

#   Specifies the domain names this server block responds to.
		server_name druiz-ca.42.fr;
#   It can include multiple domains separated by spaces.


###   LOCATION BLOCKS   ###

#   Location blocks define how requests are handled based on the requested \
# URL path or file type.

#   This block is for handling general requests to the root (/) and \
# other static resources on the server.
		location / {
#   Location / matches all requests that start with / (essentially everything) \
# It's the default catch-all for most requests unless a more specific block matches.

#   The try_files directive tells Nginx to check for the existence of specific \
# files or directories in the filesystem, in order.
			try_files $uri $uri/ =404;
#   $uri represents the exact file or path requested by the user.
#   $uri/ represents the directory form of the requested path.
#   For example, a request for /nonexistent will check if /nonexistent exists \
# as a file. After that, it checks if /nonexistent/ exists as a directory.
#   After that, return a 404 Not Found error.

		}

#   This block is specifically for handling PHP files. It forwards these \
# request to a PHP FastCGI process.
		location ~ \.php$ {
#   Location ~ indicates a regular expression (regex) match (For example, \
# the one used in the Finite Automata for Minishell).
#   \.php$ matches any URL ending with 

#   FastCGI is a protocol designed to enable interaction between a web server \
# (like Nginx) and an application server or script interpreter (like PHP-FPM).

#   FastCGI operates by creating a persistent connection between the \
# web server and the application server, which allows multiple request to be \
# prpcessed efficiently without starting a new process for each request.

#   Includes a predefined configuration snippet for FastCGI processing \
# of PHP files.
			include snippets/fastcgi-php.conf;
#   This typically sets common FastCGI parameters like the script filename, \
# query string, and document root.

#   Send PHP-related requests to a FastCGI server that is available at the \
# hostname wordpress and port 9000.
			fastcgi_pass wordpress:9000;
#   In our case, wordpress is the name of the container running PHP-FPM.
#   In that container, the PHP-FPM process will be listening for requests.

###  Example given by ChatGPT:  ###

#   1. You have a website powered by WordPress (a PHP application).

#   2. Your web server (Nginx) doesn't know how to process PHP files directly, \
# so it sends the request to another program (PHP-FPM) that specializes in PHP.

#   3. Nginx is saying: "Hey, FastCGI process at wordpress:9000, here's a request \
# for index.php. Please handle it and send me the result."

		}

		location /wp-admin {
            try_files $uri $uri/ /wp-admin/index.php?$args;
        }
	}
}
